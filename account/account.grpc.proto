syntax = "proto3";

package account;

import "info/account.info.grpc.proto";
import "credential/account.credential.grpc.proto";

service Resources {
  rpc Create(AccountCreateRequest) returns (stream AccountCreateResponse);
  rpc ReadAll(AccountReadRequest) returns (stream AccountReadResponse);
  rpc ReadAllStream(AccountReadRequest) returns (stream IAccount);
}

service Credential {
  rpc authorize(AccountAuthorizeRequest) returns (stream AccountAuthorizeResponse);
  rpc verifyToken(AccountVerifyTokenRequest) returns (stream AccountVerifyTokenResponse);
  rpc refreshToken(AccountVerifyTokenRequest) returns (stream AccountAuthorizeResponse);
}

//##################################################################################
message IAccount {
  optional string id = 1;
  optional string preference = 2;
  optional account.credential.IAccountCredential credential = 3;
  optional account.info.IAccountInfo info = 4;
}
//##################################################################################
message AccountVerifyTokenRequest {
  string token = 1;
}

message AccountVerifyTokenResponse {
  bool status = 1;
  int64 code = 2;
  string msg = 3;
  optional IAccount data = 4;
}
//##################################################################################
message AccountAuthorizeRequest {
  string username = 1;
  string password = 2;
}
message AccountAuthorizeResponse {
  string token_type = 1 [json_name = "token_type"];
  string access_token = 2 [json_name = "access_token"];
  string refresh_token = 3 [json_name = "refresh_token"];
  int32 expires_in = 4 [json_name = "expires_in"];
  optional string scope = 5 [json_name = "scope"];
}
//##################################################################################
message AccountCreateResponseData {
  string info = 1;
  string credential = 2;
}

message AccountCreateResponse {
  bool status = 1;
  int64 code = 2;
  string msg = 3;
  optional AccountCreateResponseData data = 4;
}

message AccountCreateRequest {
  account.credential.IAccountCredential credential = 1;
  account.info.IAccountInfo info = 2;
}
//##################################################################################
message AccountReadResponseMetadata {
  optional int64 count = 1;
}
message AccountReadResponse {
  bool status = 1;
  int64 code = 2;
  string msg = 3;
  repeated IAccount data = 4;
  optional AccountReadResponseMetadata metadata = 5;
}

message AccountReadRequestQueryWhere {

}

message AccountReadRequestQuery {
  optional AccountReadRequestQueryWhere where = 1;
}

message AccountReadRequestOptions {
  optional int32 limit = 1;
  optional bool allowDiskUse = 2;
}

message AccountReadRequest {
  optional AccountReadRequestQuery query = 1;
  optional AccountReadRequestOptions options = 2;
}
//##################################################################################



